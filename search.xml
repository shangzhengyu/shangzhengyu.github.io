<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于hexo + github 博客环境的搭建与美化</title>
    <url>/2021/08/15/21815.html</url>
    <content><![CDATA[<h1 id="关于hexo-github-博客环境的搭建与美化"><a href="#关于hexo-github-博客环境的搭建与美化" class="headerlink" title="关于hexo + github 博客环境的搭建与美化"></a>关于hexo + github 博客环境的搭建与美化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用hexo + github(gitee)搭建博客能实现白嫖的效果</p>
<p>gitee现在不能新建仓库，我就不会搞这个方案了</p>
<p>搭出的博客网址是： xxx.github.io (不用输入http等)</p>
<p>后期以matery主题为例</p>
<p>该方案不能保证博客是绝对安全的，但以后有钱了可以转安全方案（最好的途径还是不白嫖）</p>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><a href="https://shangzhengyu.github.io/">云霄学派</a></p>
<p><a href="https://blinkfox.github.io/">闪烁之狐</a></p>
<p><a href="https://pcyfine.gitee.io/">Pcy-Blog</a></p>
<p><a href="https://yafine-blog.cn/">yafine-blog</a></p>
<p><a href="https://www.lixl.cn/">李小龙的博客</a></p>
<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ul>
<li>Win10 x64</li>
<li>Node.js</li>
<li>Git</li>
<li>Google Chrome/Microsoft Edge(好用的浏览器)</li>
<li>GitHub</li>
<li>sublime /vscode …（一个编写代码环境）</li>
</ul>
<h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><h3 id="1-Node-js-Git下载"><a href="#1-Node-js-Git下载" class="headerlink" title="1.Node.js, Git下载"></a>1.Node.js, Git下载</h3><ul>
<li>对于win10 x64来说下载最新版本就好</li>
<li>对于两者安装步骤基本上是直接点NEXT</li>
<li>Node.js安转地址与操作说明书不同的，<u>在编辑环境变量时注意修改</u></li>
</ul>
<h3 id="2-GitHub的注册并创建仓库"><a href="#2-GitHub的注册并创建仓库" class="headerlink" title="2.GitHub的注册并创建仓库"></a>2.GitHub的注册并创建仓库</h3><ul>
<li>格式要求：XXXXX.github.io</li>
<li>英文用户名</li>
</ul>
<h3 id="3-添加SSH密钥"><a href="#3-添加SSH密钥" class="headerlink" title="3.添加SSH密钥"></a>3.添加SSH密钥</h3><h3 id="4-安装HEXO框架"><a href="#4-安装HEXO框架" class="headerlink" title="4.安装HEXO框架"></a>4.安装HEXO框架</h3><h3 id="具体搭建步骤"><a href="#具体搭建步骤" class="headerlink" title="具体搭建步骤"></a><a href="https://mp.weixin.qq.com/s/HSSTthN92uaG0lAwpJwKrQ">具体搭建步骤</a></h3><h2 id="博客美化"><a href="#博客美化" class="headerlink" title="博客美化"></a>博客美化</h2><p>关于博客的美化操作很简单（<u>以matery主题为例</u>）</p>
<ol>
<li>安装插件</li>
<li>修改配置文件</li>
<li>部署到GitHub</li>
</ol>
<p>这里我直接引用大佬们的文章了（精选哟！）</p>
<ul>
<li><a href="https://blog.csdn.net/jspnetcn/article/details/104111651">基于Hexo的matery主题搭建博客并优化</a></li>
<li><a href="https://blog.csdn.net/kuashijidexibao/article/details/112971657">Hexo-Matery主题细致美化</a></li>
<li><a href="https://blog.csdn.net/qq_44846853/article/details/104561054">Hexo博客主题安装和优化（一）</a></li>
</ul>
<p>三篇文章大同小异但也有不同的地方，相互参照，同时食用。</p>
<p>额外参考：</p>
<ul>
<li><a href="https://hexo.io/zh-cn/">HEXO 中文官网</a></li>
</ul>
<h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>暑假之期，百无聊赖，欲搭博客，又欲白嫖。（咳咳。正常点）</p>
<p>然后就查了很多资料，我先从B站开始，先看播放量最多的，发现看不懂（首先我是个小白，其次感觉要花钱，还很多），</p>
<p>然后又看了几个播放量多的，感觉能大致知道干什么了（吐槽，他们音乐声太多大了，哭…..）。</p>
<p>开始查文本资料，这条路有难度，自己实际操作错误太多了，我只能把自己的错误copy，百度再操作。</p>
<p>搭建HEXO上，开始我是用了近一天半，第二次就更加熟练，用了一会（估计一个多小时，这次用的家里win7 x32），</p>
<p>但还是能遇见错误,到了第三次就行云流水了，迅速搭建完毕，开始美化主题，</p>
<p>然后又又又遇到问题了，当我打下hexo g 的时候，git几乎显示了所有的修改内容，这并不正常，但我又找不到错误提示，</p>
<p>只能全删了再重新做一遍（后来感觉应该是什么地方多了一个空格）所以xdm 美化阶段一定要经常验证，<u>大概进每隔一两次</u></p>
<p><u>改进就把文档压缩存一份根基！！！！！！！！！！！！！！</u>。还是能遇到很多问题，虽然不是经验丰富，但也是身经百战了。</p>
<p>总体来说圆满完成任务了(! ^ _ ^ !)</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hello world</title>
    <url>/2021/08/13/26735.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">事实上</a></p>
<p><img src="/img/loading11.gif" data-original="E:\myblog\hexo\themes\matery\source\medias\comment_bg.png" alt="7"></p>
<img src="/img/loading11.gif" data-original="E:\myblog\hexo\themes\matery\source\medias\avatar.jpg" alt="啊啊啊" style="zoom:67%;" />

]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>关于hexo搭建美化的问题与解答</title>
    <url>/2021/08/16/21816.html</url>
    <content><![CDATA[<h1 id="关于hexo搭建美化的问题与解答"><a href="#关于hexo搭建美化的问题与解答" class="headerlink" title="关于hexo搭建美化的问题与解答"></a>关于hexo搭建美化的问题与解答</h1><h2 id="一-搭建问题篇"><a href="#一-搭建问题篇" class="headerlink" title="一. 搭建问题篇"></a>一. 搭建问题篇</h2><h3 id="1-安装软件（新版其实就是一直点next）"><a href="#1-安装软件（新版其实就是一直点next）" class="headerlink" title="1.安装软件（新版其实就是一直点next）"></a>1.安装软件（新版其实就是一直点next）</h3><h3 id="2-命令操作（管理员打开）配置并生成hexo环境"><a href="#2-命令操作（管理员打开）配置并生成hexo环境" class="headerlink" title="2.命令操作（管理员打开）配置并生成hexo环境"></a>2.命令操作（管理员打开）配置并生成hexo环境</h3><ul>
<li>如果使用git未能生成hexo，则使用命令操作。</li>
</ul>
<p>​      <u>在开始菜单中搜索“命令提示符”（不是“开始 + R”）右键管理员运行</u>。</p>
<ul>
<li><a href="https://blog.csdn.net/finally_flx/article/details/104914313">执行完<strong>npm install -g hexo</strong>，在git bash 下执行<strong>hexo -v</strong> 显示命令找不到</a>，可能是环境变量的问题。</li>
<li> <a href="https://blog.csdn.net/dongzh029/article/details/116223977">npm安装Vue失败，报错：npm WARN saveError ENOENT: no such file or directory</a>，可以改也可以不改他，警告可以忽略掉。</li>
<li> 必须生成一篇文章</li>
</ul>
<h3 id="3-环境变量设置"><a href="#3-环境变量设置" class="headerlink" title="3.环境变量设置"></a>3.环境变量设置</h3><h3 id="4-无法部署远端"><a href="#4-无法部署远端" class="headerlink" title="4.无法部署远端"></a>4.无法部署远端</h3><ul>
<li><p><a href="https://www.jianshu.com/p/b2c22891a644">npm install 失败 无法连接</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/tenderwx/p/5783432.html">Error: fatal: Not a git repository (or any of the parent directories): .git</a></p>
</li>
<li><p><a href="https://www.dazhuanlan.com/zrjandwxf1010/topics/1163244">warning: LF will be replaced by CRLF的去除方法</a></p>
</li>
</ul>
<h2 id="二-美化问题篇"><a href="#二-美化问题篇" class="headerlink" title="二. 美化问题篇"></a>二. 美化问题篇</h2><h3 id="1-空格不当问题"><a href="#1-空格不当问题" class="headerlink" title="1.空格不当问题"></a>1.空格不当问题</h3><ul>
<li><a href="https://blog.csdn.net/qq_43857095/article/details/108272313">err: YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1: ^</a></li>
</ul>
<h3 id="2-仓库名对应"><a href="#2-仓库名对应" class="headerlink" title="2.仓库名对应"></a>2.仓库名对应</h3><h3 id="3-插件安装及卸载"><a href="#3-插件安装及卸载" class="headerlink" title="3.插件安装及卸载"></a>3.插件安装及卸载</h3><h3 id="4-启动插件"><a href="#4-启动插件" class="headerlink" title="4.启动插件"></a>4.启动插件</h3><h3 id="5-服务器网速慢"><a href="#5-服务器网速慢" class="headerlink" title="5.服务器网速慢"></a>5.服务器网速慢</h3><ul>
<li><a href="https://blog.csdn.net/zheng_cs/article/details/117109710">Hexo-d 报错 fatal: unable to access https://github.com/xx/xx.github.io</a></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Python</title>
    <url>/2021/08/17/21817.html</url>
    <content><![CDATA[<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul>
<li>单行注释</li>
</ul>
<pre class=" language-python"><code class="language-python">   <span class="token comment" spellcheck="true">#   注释内容</span>
</code></pre>
<ul>
<li><p>多行注释</p>
<p>单引号，双引号   * 三对英文引号  *</p>
<pre class=" language-python"><code class="language-python"> <span class="token triple-quoted-string string">'''
  注释内容
 '''</span>

 <span class="token triple-quoted-string string">"""
 注释内容
 """</span>
</code></pre>
</li>
</ul>
<h1 id="print输出"><a href="#print输出" class="headerlink" title="print输出"></a>print输出</h1><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>定义变量</p>
<ul>
<li><p>变量名只能由字母，数字，下划线组成</p>
</li>
<li><p>开头不能是数字</p>
</li>
<li><p>不能过使用关键字做变量名</p>
<p>最好不要用中文做变量名</p>
</li>
</ul>
<p>查看关键字</p>
<pre class=" language-python"><code class="language-python">  <span class="token keyword">import</span> keyword
  <span class="token keyword">print</span><span class="token punctuation">(</span>keyword <span class="token punctuation">.</span>kwlist <span class="token punctuation">)</span>
  <span class="token punctuation">[</span><span class="token string">'False'</span><span class="token punctuation">,</span> <span class="token string">'None'</span><span class="token punctuation">,</span> <span class="token string">'True'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'as'</span><span class="token punctuation">,</span> <span class="token string">'assert'</span><span class="token punctuation">,</span> <span class="token string">'break'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'continue'</span><span class="token punctuation">,</span> 
  <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'del'</span><span class="token punctuation">,</span> <span class="token string">'elif'</span><span class="token punctuation">,</span> <span class="token string">'else'</span><span class="token punctuation">,</span> <span class="token string">'except'</span><span class="token punctuation">,</span> <span class="token string">'finally'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'from'</span><span class="token punctuation">,</span> <span class="token string">'global'</span><span class="token punctuation">,</span> <span class="token string">'if'</span><span class="token punctuation">,</span> 
  <span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'lambda'</span><span class="token punctuation">,</span> <span class="token string">'nonlocal'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">,</span> <span class="token string">'raise'</span><span class="token punctuation">,</span> <span class="token string">'return'</span><span class="token punctuation">,</span>
  <span class="token string">'try'</span><span class="token punctuation">,</span> <span class="token string">'while'</span><span class="token punctuation">,</span> <span class="token string">'with'</span><span class="token punctuation">,</span> <span class="token string">'yield'</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#共33个关键字</span>
</code></pre>
<p>命名变量的两种形式</p>
<p>驼峰提</p>
<p>数据类型    （非）数字型</p>
<p>数字类型</p>
<ul>
<li>数字型<ul>
<li>整型（int）</li>
<li>浮点型 (float)</li>
</ul>
</li>
<li>布尔型 (bool)</li>
</ul>
<p>通常每隔三个数字添加一个下划线，类似于英文数字中的逗号,下划线不会影响数字本身的值</p>
<p>查看数据类型</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>非数字类型</p>
<ul>
<li>字符串   (str)</li>
<li>列表      (list)</li>
<li>元组      (tuple)</li>
<li>字典     (dict)</li>
<li>集合     (set)</li>
</ul>
<p>字符串</p>
<p>若干个字符的集合就是一个字符串（String）。Python 中的字符串必须由双引号<code>&quot; &quot;</code>或者单引号<code>&#39; &#39;</code>包围，（长字符串用””” 内容”””）具体格式为：</p>
<pre class=" language-python"><code class="language-python"><span class="token string">"字符串内容"</span>

<span class="token string">'字符串内容'</span>

<span class="token triple-quoted-string string">"""
字符串
内容
"""</span>
</code></pre>
<p>字符串之间可以拼接,字符串可以自乘</p>
<pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'肖正宇'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'在吃饭'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span>肖正宇在吃饭
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span>肖正宇肖正宇肖正宇肖正宇肖正宇
</code></pre>
<p>字符串的下标和切片</p>
<p>下标</p>
<pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'肖正宇'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p>切片</p>
<p>切片的语法：[起始:结束:步长]</p>
<pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'肖正宇'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 取 下标0~1 的字符  肖正</span>
</code></pre>
<p>列表</p>
<p>列表可以存储整数、小数、字符串、列表元组等任何类型的数据，并且同一个列表中元素的类型也可以不同</p>
<ul>
<li><p>创建列表</p>
<ul>
<li>使用[]直接创建列表</li>
</ul>
<pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
</code></pre>
<ul>
<li>使用 list() 函数创建列表</li>
</ul>
<pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> list<span class="token punctuation">(</span>range <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
</code></pre>
</li>
<li><p>删除列表</p>
<ul>
<li>对于已经创建的列表，如果不再使用，可以使用<code>del</code>关键字将其删除</li>
<li>实际开发中并不经常使用 del 来删除列表，因为 Python 自带的垃圾回收机制会自动销毁无用的列表，即使开发者不手动删除，Python 也会自动将其回收</li>
</ul>
</li>
</ul>
<p>列表添加元素 （4种）</p>
<ul>
<li><p><strong>+</strong>   列表相加</p>
<pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">789</span><span class="token punctuation">]</span>
c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'ww':18&amp;#125;,[1,&amp;#123;'aa': 45&amp;#125;]]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'ww': 18&amp;#125;, [1, &amp;#123;'aa': 45&amp;#125;]]</span>
</code></pre>
</li>
<li><p>append()    追加一个任意元素</p>
<pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token number">0</span>
b<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
b<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token string">'0,2,3'</span>
b<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'0,2,3'</span><span class="token punctuation">]</span>
</code></pre>
</li>
<li><p>extend()    追加一个任意元素, 不支持 int ，支持list ,字典（其中的顺序会有差异），不会把列表或者元祖视为一个整体，而是把它们包含的元素逐个添加到列表中</p>
<pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'aa':18&amp;#125;]</span>
b<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token string">'0 1,2'</span>
b<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'aa': 18&amp;#125;, '0', ' ', '1', ',', '2']</span>
</code></pre>
</li>
<li><p>insert()      位置插入法(只插入一个元素)</p>
<pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c++'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'python'</span><span class="token punctuation">]</span>
name<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'php'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'c++'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span>
</code></pre>
</li>
</ul>
<p>列表删除元素 （4种）</p>
<ul>
<li><p>根据目标元素所在位置的索引进行删除，可以使用 del 关键字或者 pop() 方法</p>
</li>
<li><p>根据元素本身的值进行删除，可使用列表（list类型）提供的 remove() 方法</p>
</li>
<li><p>del    .pop    .remove每次只能删除一个元素</p>
</li>
<li><p>将列表中所有元素全部删除，可使用列表（list类型）提供的 clear() 方法</p>
<pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c++'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">]</span>
<span class="token keyword">del</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'c++'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">]</span>
a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">]</span>
a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'java'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">]</span>
a<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre>
</li>
</ul>
<p>列表修改元素  （3种）</p>
<ul>
<li>修改单个元素</li>
<li>修改一组元素</li>
</ul>
<pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c++'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'python'</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># del name[0]</span>
<span class="token comment" spellcheck="true"># name.insert(0,'c--')</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>
name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'c--'</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>
name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
</code></pre>
<p>元组  </p>
<p>格式—–t = (1,2.3,True,’abc’) </p>
<p>元组（tuple）是 Python 中另一个重要的序列结构，和列表类似，元组也是由一系列按特定顺序排序的元素组成</p>
<p>元组和列表（list）的不同之处在于：</p>
<ul>
<li>列表的元素是可以更改的，包括修改元素值，删除和插入元素，所以列表是可变序列；</li>
<li>而元组一旦被创建，它的元素就不可更改了，所以元组是不可变序列</li>
<li>元组也可以看做是不可变的列表，通常情况下，元组用于保存无需修改的内容</li>
</ul>
<p><strong>tuple 元组是一个只读版本的 list 列表，元组要比列表更加轻量级，所以从总体上来说，元组的性能速度要由于列表</strong></p>
<ol>
<li><p>从形式上看，元组的所有元素都放在一对小括号<code>( )</code>中，相邻元素之间用逗号<code>,</code>分隔</p>
</li>
<li><p>从存储内容上看，元组可以存储整数、实数、字符串、列表、元组等任何类型的数据，</p>
<p>并且在同一个元组中，元素的类型可以不同</p>
</li>
</ol>
<p><strong>创建元祖</strong></p>
<ol>
<li>使用()直接创建</li>
<li>使用tuple()函数创建元祖</li>
</ol>
<p>字典</p>
<p>格式——–   <strong>{键（key）: 值（value）}</strong>       键及其关联的值称为“键值对”</p>
<p>字典添加键值对</p>
<ul>
<li>直接添加</li>
</ul>
<pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'数学':95&amp;#125;</span>
a<span class="token punctuation">[</span><span class="token string">'语文'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'数学': 95, '语文': 100&amp;#125;</span>
</code></pre>
<p>字典修改键值对</p>
<ul>
<li>只能修改值(value)    和 添加格式一样</li>
</ul>
<p>字典删除键值对</p>
<ul>
<li>使用 del 语句</li>
</ul>
<pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'数学': 95, '语文': 89, '英语': 90&amp;#125;</span>
<span class="token keyword">del</span> a<span class="token punctuation">[</span><span class="token string">'语文'</span><span class="token punctuation">]</span>
<span class="token keyword">del</span> a<span class="token punctuation">[</span><span class="token string">'数学'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'英语': 90&amp;#125;</span>
</code></pre>
<p>字典中是否存在指定键值对</p>
<ul>
<li>使用 in 或 not in 运算符</li>
</ul>
<pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'数学': 95, '语文': 89, '英语': 90&amp;#125;</span>
<span class="token comment" spellcheck="true"># 判断 a 中是否包含名为'数学'的key</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数学'</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span> 
</code></pre>
<p>集合</p>
<p>Python中的集合，和数学中的集合概念一样，用来保存不重复的元素，即集合中的元素都是唯一的，互不相同。</p>
<p><strong>集合是无序的，集合中的元素是唯一的，集合一般用于元组或者列表中的元素去重</strong></p>
<p>从形式上看，和字典类似，Python 集合会将所有元素放在一对大括号 {} 中，相邻元素之间用“,”分隔</p>
<p><strong>添加元素</strong></p>
<p>set 集合中添加元素，可以使用 set 类型提供的 add() 方法实现</p>
<p><strong>删除元素</strong></p>
<p>删除现有 set 集合中的指定元素，可以使用 remove() 方法</p>
<p>如果我们不想在删除失败时令解释器提示 KeyError 错误，还可以使用 discard() 方法，此方法和 remove() 方法的用法完全相同，唯一的区别就是，当删除集合中元素失败时，此方法不会抛出任何错误</p>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>算术运算符</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">/</td>
<td align="center">10 / 20 = 0.5</td>
</tr>
<tr>
<td align="center">//</td>
<td align="center">5 // 3 = 1</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">5 % 3 = 2</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">2 ** 3 = 8</td>
</tr>
</tbody></table>
<p>比较运算符</p>
<p>​    =      &lt;     &lt;=     !=     ==</p>
<p>​    返回的是布尔值</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>   
<span class="token operator">>></span><span class="token operator">></span><span class="token boolean">True</span>
</code></pre>
<p>逻辑运算符</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">not</td>
<td align="center">not a</td>
<td align="center">对错反之</td>
</tr>
<tr>
<td align="center">and</td>
<td align="center">a and b</td>
<td align="center">a,b都对返回Ture,有一个错则返回False，都对则a,b都会运行，出现错，则不运行后面</td>
</tr>
<tr>
<td align="center">or</td>
<td align="center">a or b</td>
<td align="center">有一个对的则返回Ture，全错则返回False，不管对错a,b都会运行</td>
</tr>
</tbody></table>
<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">and</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token operator">>></span><span class="token operator">></span> <span class="token number">0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ss'</span> <span class="token operator">and</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span>           <span class="token comment" spellcheck="true">#空</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">or</span> <span class="token string">'ddd'</span><span class="token punctuation">)</span>     <span class="token operator">>></span><span class="token operator">></span> ddd
</code></pre>
<p>赋值运算符</p>
<ul>
<li><p>增量式赋值</p>
<p>=     +=     -=     *=     /=     //=     **=</p>
</li>
<li><p>链式赋值</p>
<pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> y <span class="token operator">=</span> z<span class="token operator">=</span> <span class="token number">10</span>
</code></pre>
</li>
<li><p>交叉赋值</p>
<pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">5</span>
b <span class="token operator">=</span> <span class="token number">4</span>
a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token number">4</span> <span class="token number">5</span>
</code></pre>
</li>
<li><p>解压赋值</p>
<pre class=" language-python"><code class="language-python">nums <span class="token operator">=</span>     <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">#下标/索引    0   1   2   3  4</span>

每个值 分别赋值给 a b c d e

ctrl <span class="token operator">+</span> d

a <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
c <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
d <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
e <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>
a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span>e <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token number">11</span> <span class="token number">22</span> <span class="token number">33</span> <span class="token number">44</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span>
x<span class="token punctuation">,</span> <span class="token operator">*</span>_<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> nums
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>end<span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>end<span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token number">11</span> <span class="token number">44</span> <span class="token number">55</span>
   <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span>
</code></pre>
</li>
</ul>
<p>成员运算符</p>
<p>​    包含  in / not in<br>​    print(‘e’ in ‘hello ‘)  # 找到了 返回True<br>​    print(4 not in [1, 2, 3])  # 没有找到 返回True<br>​    <strong>字典我们判断的是</strong>  <strong>key</strong><br>​    print(‘k1’ in {‘k1’: 1111, ‘k2’: 2222})</p>
<p>身份运算符</p>
<table>
<thead>
<tr>
<th align="center">is</th>
<th align="center">x is y  则 id(x) == id(y)</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>is not</strong></td>
<td align="center"><strong>x is not  则 y id(x) ！= id(y)</strong></td>
</tr>
</tbody></table>
<p>id 反应的变量值的内存地址<br>is 与 ==的区别is<br>is 比较的是两个值的 id 是否相等<br>== 比较的是两个值的 值 是否相等</p>
<p>运算符优先级</p>
<p>​    以下表格的算数优先级由高到最低顺序排列</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">**</td>
</tr>
<tr>
<td align="center">* / % //</td>
</tr>
<tr>
<td align="center">+ -</td>
</tr>
<tr>
<td align="center">&lt;= &lt; &gt; &gt;=</td>
</tr>
<tr>
<td align="center">== !=</td>
</tr>
<tr>
<td align="center">= %= /= //= -= += *= **=</td>
</tr>
<tr>
<td align="center">not  and  or</td>
</tr>
</tbody></table>
<h1 id="格式输出"><a href="#格式输出" class="headerlink" title="格式输出"></a>格式输出</h1><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h1 id="随机抽取"><a href="#随机抽取" class="headerlink" title="随机抽取"></a>随机抽取</h1><p> rendom模块</p>
<p>可以产生制定范围内的随机数，字符串</p>
<table>
<thead>
<tr>
<th>random</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>.randint（a,b）</td>
<td>打印随机数  a-b之间</td>
</tr>
<tr>
<td>.choice （a）</td>
<td>抽取a中一个元素，a可以是字符串或list</td>
</tr>
<tr>
<td>.sample (a,n)</td>
<td>抽取a中n个元素，输出列表格式，a可以是字符串或list</td>
</tr>
</tbody></table>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random
a <span class="token operator">=</span> random <span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
b <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token string">'45gdhg'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
b <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'sd'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
s <span class="token operator">=</span> <span class="token string">'ABCD645EFG'</span>
c <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'sd'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1&amp;#125;]</span>
c <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token number">9</span>
<span class="token operator">>></span><span class="token operator">></span>h
<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'sd'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1&amp;#125;, 1]</span>
</code></pre>
<p>string模块</p>
<table>
<thead>
<tr>
<th><strong>string</strong></th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>string.ascii_letters</td>
<td># 所有字母</td>
</tr>
<tr>
<td>string.ascii_uppercase</td>
<td># 大写字母</td>
</tr>
<tr>
<td>string.ascii_lowercase</td>
<td># 小写字母</td>
</tr>
<tr>
<td>string.punctuation</td>
<td># 特殊字符</td>
</tr>
<tr>
<td>string.digits</td>
<td># 数字</td>
</tr>
</tbody></table>
<p>​    </p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> string  <span class="token comment" spellcheck="true"># 导入模块</span>
a <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters    <span class="token comment" spellcheck="true"># 所有字母</span>
b <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_uppercase  <span class="token comment" spellcheck="true"># 大写字母</span>
c <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase  <span class="token comment" spellcheck="true"># 小写字母</span>
d <span class="token operator">=</span> string<span class="token punctuation">.</span>punctuation      <span class="token comment" spellcheck="true"># 特殊字符</span>
e <span class="token operator">=</span> string<span class="token punctuation">.</span>digits           <span class="token comment" spellcheck="true"># 数字</span>
<span class="token operator">>></span><span class="token operator">></span>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
<span class="token operator">>></span><span class="token operator">></span>ABCDEFGHIJKLMNOPQRSTUVWXYZ
<span class="token operator">>></span><span class="token operator">></span>abcdefghijklmnopqrstuvwxyz
<span class="token operator">>></span><span class="token operator">></span>!"<span class="token comment" spellcheck="true">#$%&amp;'()*+,-./:;&lt;=>?@[\]^_`&amp;#123;|&amp;#125;~</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token number">0123456789</span>
</code></pre>
<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>操作三个步骤</p>
<ul>
<li>打开文件</li>
<li>操作文件<ul>
<li>读操作      read</li>
<li>写操作<ul>
<li>追加写</li>
<li>覆盖写</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>读写模式</p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">r</td>
<td>读取已存在的文件，指针默认放在文件开头</td>
</tr>
<tr>
<td align="left">a</td>
<td>如果文件存在，指针于文末追加，若文件不存在，则创建文件写入</td>
</tr>
<tr>
<td align="left">w</td>
<td>如果文件存在，覆盖写，若不存在，则创建写入</td>
</tr>
<tr>
<td align="left">rb</td>
<td></td>
</tr>
<tr>
<td align="left">wb</td>
<td></td>
</tr>
<tr>
<td align="left">ab</td>
<td></td>
</tr>
<tr>
<td align="left">r+</td>
<td></td>
</tr>
<tr>
<td align="left">a+</td>
<td></td>
</tr>
<tr>
<td align="left">w+</td>
<td></td>
</tr>
<tr>
<td align="left">rb+</td>
<td></td>
</tr>
<tr>
<td align="left">wb+</td>
<td></td>
</tr>
<tr>
<td align="left">ab+</td>
<td></td>
</tr>
<tr>
<td align="left"></td>
<td></td>
</tr>
</tbody></table>
<pre class=" language-python"><code class="language-python">
<span class="token comment" spellcheck="true">#对于文本（.txt）的操作</span>
一个模式
f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#选则编码格式  utf-8</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'内容\n换行'</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true">#'\n'可以换行</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>
两个模式
f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>  
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'内容'</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#'f.seek(0) '把指针放在文件开头</span>
date <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>
</code></pre>
<p>化简操作格式     </p>
<p>​                                ————–with open() as f:</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'2.txt'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'shdfgjahfh123g'</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    date <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>
</code></pre>
<p>读取文件</p>
<p> f.read(size):读取文件，size表示读取的数量</p>
<p> f.readline():读取文件的一行，当使用for循环时，会自动调用本函数</p>
<p> f.readlines():以列表的形式读取文件，一行为一个元素</p>
<p>文件备份</p>
<h1 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h1><p>模块  import os</p>
<ul>
<li>重命名和删除文件</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os
 
<span class="token comment" spellcheck="true"># 重命名文件too.txt到f.txt。</span>
os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"f.txt"</span><span class="token punctuation">)</span>
</code></pre>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os
 
<span class="token comment" spellcheck="true"># 删除一个已经存在的文件f.txt。</span>
os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li><p>目录操作</p>
<ul>
<li><p>创建文件夹</p>
<p>语法：os.mkdir(“newdir”)</p>
</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os
 
<span class="token comment" spellcheck="true"># 创建目录test</span>
os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li><p>给出当前文件目录</p>
<p>语法：os.getcwd()</p>
</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os
 
<span class="token comment" spellcheck="true"># 给出当前的目录</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li><p>删除文件夹</p>
<p>语法：os.rmdir(‘dirname’)</p>
</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os
 
<span class="token comment" spellcheck="true"># 删除”test”目录</span>
os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>
</code></pre>
</li>
</ul>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>在Python中，一个py文件，就是一个模块，即xxx.py是一个模块</p>
<p>  模块就是一系列功能的集合体，分为三大类<br>        I：内置的模块<br>        II：第三方的模块<br>        III：自定义的模块</p>
<p>模块的调用</p>
<ul>
<li>import 模块名</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> index       <span class="token comment" spellcheck="true">#全部导入              不常用</span>
<span class="token comment" spellcheck="true"># index.foo()</span>
<span class="token comment" spellcheck="true">#会先执行一遍index中的代码</span>
</code></pre>
<ul>
<li>form 模块名 import  具体函数名</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> dayy <span class="token keyword">import</span> foo   <span class="token comment" spellcheck="true">#更有针对性地调用   且常用</span>
foo<span class="token punctuation">(</span><span class="token punctuation">)</span>                       
</code></pre>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> dayy <span class="token keyword">import</span> <span class="token operator">*</span>       <span class="token comment" spellcheck="true"># * 代表所有 但很不常用</span>
<span class="token comment" spellcheck="true"># foo()                  #  可能出现函数重名 </span>
</code></pre>
<p> as  改名</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> index <span class="token keyword">as</span> <span class="token keyword">in</span>
<span class="token comment" spellcheck="true"># in.foo()</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>

<span class="token keyword">import</span> index <span class="token punctuation">,</span> muyi <span class="token keyword">as</span> aa
<span class="token comment" spellcheck="true"># 导入两个模块，但as只能跟一个元素</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>

<span class="token keyword">from</span> dayy <span class="token keyword">import</span> foo <span class="token keyword">as</span> f
</code></pre>
<p>导入多个模块</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> index <span class="token punctuation">,</span> muyi
</code></pre>
<p>一个模块导入多个函数</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> dayy <span class="token keyword">import</span> foo <span class="token punctuation">,</span>info
</code></pre>
<p>导入的模块不在一个文件夹中需要添加模块所在文件夹的路径</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys
path <span class="token operator">=</span>r <span class="token string">'文件夹路径'</span>
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
<span class="token keyword">import</span> index            <span class="token comment" spellcheck="true">#先添加路径，再导入</span>
</code></pre>
]]></content>
      <categories>
        <category>高级语言</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
